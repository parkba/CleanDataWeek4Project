getwd()
library("swirl")
swirl()
TRUE==TRUE
(false==true)==FALSE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6,4)
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
library("swirl")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("BOF")
submit()
mad_libs(place="Lux",adjective="lovely",noun="building")
submit()
'Hello' %p% 'student!'
submit()
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
?mean
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
ls()
dir()
pollutantmean("specdata", "sulfate", 1:10)
?read.csv
dir()
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
dir()
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
?formatc
??formatc
?formatC
?str_pad
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
library("stringr")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
?data.frame
?lapply
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
getwd()
setwd("/Users/bethpark/Documents/Data Science/Repositories")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
?mean
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
install.packages("data.table")
library("data.table")
source("pollutantmean.R")
dir()
getwd()
setwd("/Users/bethpark/Documents/Data Science/Repositories")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
dir()
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
?subset
?lapply
?list.files
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
library("swirl")
swirl()
swirl()
swirl()
swirl()
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
pwd()
getwd()
read.csv("quiz-getdata_data_ss06hid.csv")
acsData <- read.csv("quiz-getdata_data_ss06hid.csv")
View(acsData)
dim(acsData)
class(acsData)
library(data.table)
acsDT <- data.table(acsData)
class(acsDT)
head(acsDT)
acsDT[acsDT$TYPE==1,]
acsDT[acsDT$TYPE==24,]
acsDT[acsDT$VAL==24,]
millprops <- acsDT[acsDT$VAL==24,]
library(xlsx)
library(XML)
install.packages("XML")
fread(input="quiz-getdata_data_ss06pid.csv")
DT <- fread(input="quiz-getdata_data_ss06pid.csv")
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
install.packages("XLSX")
install.packages("xlsx")
library(xlsx)
install.packages("XLConnect")
library(XLConnect)
install.packages("rJAva")
install.packages("rJava")
library(rJava)
version()
Version()
version
library(xlsx)
install.packages("openxlsx")
library(openxlsx)
help("openxlsx")
dat <- read.xlsx(xlsxFile=quiz-getdata_data_DATA.gov_NGAP.xlsx, rows=c(18:23), cols=c(7:15))
dat <- read.xlsx(xlsxFile="quiz-getdata_data_DATA.gov_NGAP.xlsx", rows=c(18:23), cols=c(7:15))
View(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
library(XML)
doc <- xmlTreeParse(quiz-getdata_data_restaurants.xml,useInternal=TRUE)
doc <- xmlTreeParse("quiz-getdata_data_restaurants.xml",useInternal=TRUE)
view(doc)
View(doc)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
xpathSApply(doc,"zipcode")
zipcodes <- xpathSApply(doc,"zipcode",xmlValue)
zipcodes <- xpathSApply(rootNode, "//zipcode", xmlValue)
head(zipcodes)
length(which(zipcodes=="21231"))
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time())
select(cran, -time
)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version =="3.1.1", country == "US")
?Comparison
filter(cran, r_version <="3.0.2", country == "IN")
filter(cran, country=="US | country == "IN")
filter(cran, country=="US | country == "IN")
filter(cran, country=="US | country == "IN")
filter(cran, country=="US" | country == "IN")
filter(cran, size > 100500, r_os =="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size-1000)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes=mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package,mean(size))
sumbit()
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data=res, col=sex_class, into=c("sex","class"))
submit()
submit()
students3
submit()
?spread
submit()
library(readr)
parse_number("class5")
submit()
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
bind_rows(passed, failed)
sat
submit()
submit()
setwd("~/Documents/Data Science/Repositories/ProgrammingAssignment4")
source('~/Documents/Data Science/Repositories/ProgrammingAssignment4/run_analysis.R', echo=TRUE)
setwd("~/Documents/Data Science/Repositories/ProgrammingAssignment4")
source('~/Documents/Data Science/Repositories/ProgrammingAssignment4/run_analysis.R', echo=TRUE)
